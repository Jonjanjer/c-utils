!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AP_ARG	include/utils/arg_parser.h	/^#define AP_ARG(/;"	d
AP_ARG_BOOL	include/utils/arg_parser.h	/^#define AP_ARG_BOOL(/;"	d
AP_CMD	include/utils/arg_parser.h	/^#define AP_CMD(/;"	d
AP_FLAGS	include/utils/arg_parser.h	/^#define AP_FLAGS(/;"	d
AP_HELP	include/utils/arg_parser.h	/^#define AP_HELP(/;"	d
AP_HELP_SPACING	include/utils/arg_parser.h	/^#define AP_HELP_SPACING	/;"	d
AP_OPT_NOFLAG	include/utils/arg_parser.h	/^#define AP_OPT_NOFLAG	/;"	d
AP_OPT_REQUIRED	include/utils/arg_parser.h	/^#define AP_OPT_REQUIRED	/;"	d
AP_OPT_SEEN	include/utils/arg_parser.h	/^#define AP_OPT_SEEN	/;"	d
AP_SENTINEL	include/utils/arg_parser.h	/^#define AP_SENTINEL /;"	d
AP_STORE_BOOL	include/utils/arg_parser.h	/^#define AP_STORE_BOOL(/;"	d
AP_STORE_INT	include/utils/arg_parser.h	/^#define AP_STORE_INT(/;"	d
AP_STORE_STR	include/utils/arg_parser.h	/^#define AP_STORE_STR(/;"	d
AP_TYPE_BOOL	include/utils/arg_parser.h	/^	AP_TYPE_BOOL,$/;"	e	enum:ap_type_e
AP_TYPE_BOOL_HANDLER	include/utils/arg_parser.h	/^	AP_TYPE_BOOL_HANDLER,$/;"	e	enum:ap_type_e
AP_TYPE_CMD	include/utils/arg_parser.h	/^	AP_TYPE_CMD,$/;"	e	enum:ap_type_e
AP_TYPE_INT	include/utils/arg_parser.h	/^	AP_TYPE_INT,$/;"	e	enum:ap_type_e
AP_TYPE_SENTINEL	include/utils/arg_parser.h	/^	AP_TYPE_SENTINEL$/;"	e	enum:ap_type_e
AP_TYPE_STR	include/utils/arg_parser.h	/^	AP_TYPE_STR,$/;"	e	enum:ap_type_e
AP_VALIDATOR	include/utils/arg_parser.h	/^#define AP_VALIDATOR(/;"	d
ARG_UNUSED	include/utils/utils.h	/^#define ARG_UNUSED(/;"	d
ARRAY_BASE	include/utils/utils.h	/^#define ARRAY_BASE(/;"	d
ARRAY_SIZEOF	include/utils/utils.h	/^#define ARRAY_SIZEOF(/;"	d
BIT	include/utils/utils.h	/^#define BIT(/;"	d
BLU	src/logger.c	/^#define BLU /;"	d	file:
BYTE_0	include/utils/utils.h	/^#define BYTE_0(/;"	d
BYTE_1	include/utils/utils.h	/^#define BYTE_1(/;"	d
BYTE_2	include/utils/utils.h	/^#define BYTE_2(/;"	d
BYTE_3	include/utils/utils.h	/^#define BYTE_3(/;"	d
CCFLAGS	Makefile	/^CCFLAGS ?= -Wall -Wextra -O3$/;"	m
CHANNEL_ERR_ALREADY_OPEN	include/utils/channel.h	/^	CHANNEL_ERR_ALREADY_OPEN,$/;"	e	enum:channel_errors
CHANNEL_ERR_NONE	include/utils/channel.h	/^	CHANNEL_ERR_NONE,$/;"	e	enum:channel_errors
CHANNEL_ERR_NOT_OPEN	include/utils/channel.h	/^	CHANNEL_ERR_NOT_OPEN,$/;"	e	enum:channel_errors
CHANNEL_ERR_OOM	include/utils/channel.h	/^	CHANNEL_ERR_OOM,$/;"	e	enum:channel_errors
CHANNEL_ERR_OPEN_FAILED	include/utils/channel.h	/^	CHANNEL_ERR_OPEN_FAILED,$/;"	e	enum:channel_errors
CHANNEL_ERR_UNKNOWN_TYPE	include/utils/channel.h	/^	CHANNEL_ERR_UNKNOWN_TYPE,$/;"	e	enum:channel_errors
CHANNEL_TYPE_ERR	include/utils/channel.h	/^	CHANNEL_TYPE_ERR,$/;"	e	enum:channel_type
CHANNEL_TYPE_FIFO	include/utils/channel.h	/^	CHANNEL_TYPE_FIFO,$/;"	e	enum:channel_type
CHANNEL_TYPE_MSGQ	include/utils/channel.h	/^	CHANNEL_TYPE_MSGQ,$/;"	e	enum:channel_type
CHANNEL_TYPE_SENTINEL	include/utils/channel.h	/^	CHANNEL_TYPE_SENTINEL$/;"	e	enum:channel_type
CHANNEL_TYPE_UART	include/utils/channel.h	/^	CHANNEL_TYPE_UART,$/;"	e	enum:channel_type
CHANNEL_TYPE_UNIX_BUS	include/utils/channel.h	/^	CHANNEL_TYPE_UNIX_BUS,$/;"	e	enum:channel_type
CIRC_GBUF_DEF	include/utils/circbuf.h	/^#define CIRC_GBUF_DEF(/;"	d
CIRC_GBUF_FLUSH	include/utils/circbuf.h	/^#define CIRC_GBUF_FLUSH(/;"	d
CIRC_GBUF_FS	include/utils/circbuf.h	/^#define CIRC_GBUF_FS(/;"	d
CIRC_GBUF_PEEK	include/utils/circbuf.h	/^#define CIRC_GBUF_PEEK(/;"	d
CIRC_GBUF_POP	include/utils/circbuf.h	/^#define CIRC_GBUF_POP(/;"	d
CIRC_GBUF_PUSH	include/utils/circbuf.h	/^#define CIRC_GBUF_PUSH(/;"	d
CONTAINER_OF	include/utils/utils.h	/^#define CONTAINER_OF(/;"	d
CYN	src/logger.c	/^#define CYN /;"	d	file:
DATE_TIME_STR_LEN	tests/test.c	/^#define DATE_TIME_STR_LEN /;"	d	file:
DISJOINT_SET_MAX	include/utils/disjoint_set.h	/^#define DISJOINT_SET_MAX /;"	d
FALSE	include/utils/utils.h	/^#define FALSE /;"	d
FILO_DEF	include/utils/filo.h	/^#define FILO_DEF(/;"	d
FILO_EXTERN	include/utils/filo.h	/^#define FILO_EXTERN(/;"	d
FILO_GET_COUNT	include/utils/filo.h	/^#define FILO_GET_COUNT(/;"	d
FILO_PEEK	include/utils/filo.h	/^#define FILO_PEEK(/;"	d
FILO_POP	include/utils/filo.h	/^#define FILO_POP(/;"	d
FILO_PUSH	include/utils/filo.h	/^#define FILO_PUSH(/;"	d
GET_POOL_POS	src/hashmap.c	/^#define GET_POOL_POS(/;"	d	file:
GRN	src/logger.c	/^#define GRN /;"	d	file:
HASH_MAP_BASE_SIZE	src/hashmap.c	/^#define HASH_MAP_BASE_SIZE /;"	d	file:
HASH_MAP_DENSITY_FACTOR	src/hashmap.c	/^#define HASH_MAP_DENSITY_FACTOR /;"	d	file:
HASH_MAP_FOREACH	include/utils/hashmap.h	/^#define HASH_MAP_FOREACH(/;"	d
IS_ENABLED	include/utils/utils.h	/^#define IS_ENABLED(/;"	d
IS_POW2	include/utils/utils.h	/^#define IS_POW2(/;"	d
LIMIT	tests/test-circbuf.c	/^#define LIMIT /;"	d	file:
LIST_FOREACH	include/utils/list.h	/^#define LIST_FOREACH(/;"	d
LOGGER_DECLARE	include/utils/logger.h	/^#define LOGGER_DECLARE(/;"	d
LOGGER_DEFINE	include/utils/logger.h	/^#define LOGGER_DEFINE(/;"	d
LOGGER_FLAG_HAS_PREFIX	include/utils/logger.h	/^#define LOGGER_FLAG_HAS_PREFIX /;"	d
LOGGER_FLAG_NONE	include/utils/logger.h	/^#define LOGGER_FLAG_NONE /;"	d
LOGGER_FLAG_NO_COLORS	include/utils/logger.h	/^#define LOGGER_FLAG_NO_COLORS /;"	d
LOGGER_FLAG_PREFIX_ALLOC	include/utils/logger.h	/^#define LOGGER_FLAG_PREFIX_ALLOC /;"	d
LOG_ALERT	include/utils/logger.h	/^	LOG_ALERT,$/;"	e	enum:log_levels
LOG_ALERT	include/utils/logger.h	/^#define LOG_ALERT(/;"	d
LOG_BUF_LEN	src/logger.c	/^#define LOG_BUF_LEN /;"	d	file:
LOG_CLEAR_PREFIX	include/utils/logger.h	/^#define LOG_CLEAR_PREFIX(/;"	d
LOG_CRIT	include/utils/logger.h	/^	LOG_CRIT,$/;"	e	enum:log_levels
LOG_CRIT	include/utils/logger.h	/^#define LOG_CRIT(/;"	d
LOG_DBG	include/utils/logger.h	/^#define LOG_DBG(/;"	d
LOG_DEBUG	include/utils/logger.h	/^	LOG_DEBUG,$/;"	e	enum:log_levels
LOG_EM	include/utils/logger.h	/^#define LOG_EM(/;"	d
LOG_EMERG	include/utils/logger.h	/^	LOG_EMERG,$/;"	e	enum:log_levels
LOG_ERR	include/utils/logger.h	/^	LOG_ERR,$/;"	e	enum:log_levels
LOG_ERR	include/utils/logger.h	/^#define LOG_ERR(/;"	d
LOG_INF	include/utils/logger.h	/^#define LOG_INF(/;"	d
LOG_INFO	include/utils/logger.h	/^	LOG_INFO,$/;"	e	enum:log_levels
LOG_MAX_LEVEL	include/utils/logger.h	/^	LOG_MAX_LEVEL$/;"	e	enum:log_levels
LOG_NOT	include/utils/logger.h	/^#define LOG_NOT(/;"	d
LOG_NOTICE	include/utils/logger.h	/^	LOG_NOTICE,$/;"	e	enum:log_levels
LOG_PRINT	include/utils/logger.h	/^#define LOG_PRINT(/;"	d
LOG_SET_PREFIX	include/utils/logger.h	/^#define LOG_SET_PREFIX(/;"	d
LOG_SET_PREFIX_CONST	include/utils/logger.h	/^#define LOG_SET_PREFIX_CONST(/;"	d
LOG_WARNING	include/utils/logger.h	/^	LOG_WARNING,$/;"	e	enum:log_levels
LOG_WRN	include/utils/logger.h	/^#define LOG_WRN(/;"	d
MAG	src/logger.c	/^#define MAG /;"	d	file:
MAP_DENSITY	src/hashmap.c	/^#define MAP_DENSITY(/;"	d	file:
MATH_MOD	include/utils/utils.h	/^#define MATH_MOD(/;"	d
MAX	include/utils/utils.h	/^#define MAX(/;"	d
MAX_PROC_CMDLINE_ARG_SZ	src/procutils.c	/^#define MAX_PROC_CMDLINE_ARG_SZ	/;"	d	file:
MAX_PROC_CMDLINE_PATH_SZ	src/procutils.c	/^#define MAX_PROC_CMDLINE_PATH_SZ	/;"	d	file:
MIN	include/utils/utils.h	/^#define MIN(/;"	d
NULL	include/utils/utils.h	/^#define NULL /;"	d
NUM_CLIENTS	tests/test-bus-server.c	/^#define NUM_CLIENTS /;"	d	file:
NUM_JOBS	tests/test-workqueue.c	/^#define NUM_JOBS /;"	d	file:
NUM_TESTS	tests/test-filo.c	/^#define NUM_TESTS /;"	d	file:
NUM_WORKERS	tests/test-workqueue.c	/^#define NUM_WORKERS /;"	d	file:
O	Makefile	/^O       ?= .$/;"	m
OBJ	Makefile	/^OBJ     := $(SRC:src\/%.c=$(O)\/src\/%.o)$/;"	m
OFFSET_OF	include/utils/utils.h	/^#define OFFSET_OF(/;"	d
PAD	src/arg_parser.c	/^#define PAD /;"	d	file:
PATH_SEP	src/file.c	/^#define PATH_SEP /;"	d	file:
Q	Makefile	/^Q    := @$/;"	m
Q	Makefile	/^Q    :=$/;"	m
READ_ONCE	include/utils/utils.h	/^#define READ_ONCE(/;"	d
RED	src/logger.c	/^#define RED /;"	d	file:
RESET	src/logger.c	/^#define RESET /;"	d	file:
ROUND_UP	include/utils/utils.h	/^#define ROUND_UP(/;"	d
R_PROB	tests/test-circbuf.c	/^#define R_PROB /;"	d	file:
SEP	tests/test-hashmap.c	/^#define SEP /;"	d	file:
SRC	Makefile	/^SRC     := $(wildcard src\/*.c)$/;"	m
STR	include/utils/utils.h	/^#define STR(/;"	d
STRING_ALLOCATED	include/utils/strlib.h	/^#define STRING_ALLOCATED /;"	d
STRING_DEF	include/utils/strlib.h	/^#define STRING_DEF(/;"	d
SWAP	include/utils/utils.h	/^#define SWAP(/;"	d
TEST_DEF	tests/test-bus-server.c	/^TEST_DEF(bus_server)$/;"	f
TEST_DEF	tests/test-circbuf.c	/^TEST_DEF(circular_buffer)$/;"	f
TEST_DEF	tests/test-hashmap.c	/^TEST_DEF(hashmap)$/;"	f
TEST_DEF	tests/test-procutils.c	/^TEST_DEF(procutils)$/;"	f
TEST_DEF	tests/test-slab.c	/^TEST_DEF(slab)$/;"	f
TEST_DEF	tests/test-strlib.c	/^TEST_DEF(strlib)$/;"	f
TEST_DEF	tests/test-strutils.c	/^TEST_DEF(strutils)$/;"	f
TEST_DEF	tests/test-workqueue.c	/^TEST_DEF(workqueue)$/;"	f
TEST_DEF	tests/test.h	/^#define TEST_DEF(/;"	d
TEST_HELP_TEXT	tests/test.c	/^static const char *TEST_HELP_TEXT =$/;"	v	file:
TEST_MOD	tests/test.h	/^#define TEST_MOD(/;"	d
TEST_MOD_EXEC	tests/test.h	/^#define TEST_MOD_EXEC(/;"	d
TEST_MOD_INIT	tests/test.h	/^#define TEST_MOD_INIT(/;"	d
TEST_MOD_READ_FILE	tests/test.h	/^#define TEST_MOD_READ_FILE(/;"	d
TEST_MOD_REPORT	tests/test.h	/^#define TEST_MOD_REPORT(/;"	d
TEST_MOD_SENTINEL	tests/test.h	/^#define TEST_MOD_SENTINEL /;"	d
TEST_MSG	tests/test-bus-server.c	/^#define TEST_MSG /;"	d	file:
TEST_MSG_LEN	tests/test-bus-server.c	/^#define TEST_MSG_LEN /;"	d	file:
TEST_SERVER_PATH	tests/test-bus-server.c	/^#define TEST_SERVER_PATH /;"	d	file:
TEST_SLAB_COUNT	tests/test-slab.c	/^#define TEST_SLAB_COUNT /;"	d	file:
TRUE	include/utils/utils.h	/^#define TRUE /;"	d
WHT	src/logger.c	/^#define WHT /;"	d	file:
WQ_WORKER_STATE_IDLE	src/workqueue.c	/^	WQ_WORKER_STATE_IDLE,$/;"	e	enum:worker_state_e	file:
WQ_WORKER_STATE_OFFLINE	src/workqueue.c	/^	WQ_WORKER_STATE_OFFLINE,$/;"	e	enum:worker_state_e	file:
WQ_WORKER_STATE_RUNNING	src/workqueue.c	/^	WQ_WORKER_STATE_RUNNING,$/;"	e	enum:worker_state_e	file:
WQ_WORK_COMPLETE	include/utils/workqueue.h	/^	WQ_WORK_COMPLETE,$/;"	e	enum:work_status
WQ_WORK_IN_PROGRESS	include/utils/workqueue.h	/^	WQ_WORK_IN_PROGRESS,$/;"	e	enum:work_status
WQ_WORK_NEW	include/utils/workqueue.h	/^	WQ_WORK_NEW,$/;"	e	enum:work_status
WQ_WORK_QUEUED	include/utils/workqueue.h	/^	WQ_WORK_QUEUED,$/;"	e	enum:work_status
WRITE_ONCE	include/utils/utils.h	/^#define WRITE_ONCE(/;"	d
W_PROB	tests/test-circbuf.c	/^#define W_PROB /;"	d	file:
XSTR	include/utils/utils.h	/^#define XSTR(/;"	d
YEL	src/logger.c	/^#define YEL /;"	d	file:
_CHANNEL_H_	include/utils/channel.h	/^#define _CHANNEL_H_$/;"	d
_GNU_SOURCE	src/logger.c	/^#define _GNU_SOURCE	/;"	d	file:
_HASHMAP_H_	include/utils/hashmap.h	/^#define _HASHMAP_H_$/;"	d
_LOGGER_H_	include/utils/logger.h	/^#define _LOGGER_H_$/;"	d
_SERIAL_H_	include/utils/serial.h	/^#define _SERIAL_H_$/;"	d
_TEST_H_	tests/test.h	/^#define _TEST_H_$/;"	d
_UTILS_BUS_SERVER_H_	include/utils/bus_server.h	/^#define _UTILS_BUS_SERVER_H_$/;"	d
_UTILS_EVENTS_H_	include/utils/event.h	/^#define _UTILS_EVENTS_H_$/;"	d
_UTILS_FDUTILS_H_	include/utils/fdutils.h	/^#define _UTILS_FDUTILS_H_$/;"	d
_UTILS_FILO_H_	include/utils/filo.h	/^#define _UTILS_FILO_H_$/;"	d
_UTILS_LIST_H_	include/utils/list.h	/^#define _UTILS_LIST_H_$/;"	d
_UTILS_MEMORY_H_	include/utils/memory.h	/^#define _UTILS_MEMORY_H_$/;"	d
_UTILS_QUEUE_H_	include/utils/queue.h	/^#define _UTILS_QUEUE_H_$/;"	d
_UTILS_SLAB_H_	include/utils/slab.h	/^#define _UTILS_SLAB_H_$/;"	d
_UTILS_SOCKUTILS_H_	include/utils/sockutils.h	/^#define _UTILS_SOCKUTILS_H_$/;"	d
_UTILS_STACK_H_	include/utils/stack.h	/^#define _UTILS_STACK_H_$/;"	d
_UTILS_UTILS_H_	include/utils/utils.h	/^#define _UTILS_UTILS_H_$/;"	d
_UTILS_WORKQUEUE_H_	include/utils/workqueue.h	/^#define _UTILS_WORKQUEUE_H_$/;"	d
_UTIL_ARG_PARSER_H_	include/utils/arg_parser.h	/^#define _UTIL_ARG_PARSER_H_$/;"	d
_UTIL_CIRCBUF_H_	include/utils/circbuf.h	/^#define _UTIL_CIRCBUF_H_$/;"	d
_UTIL_DISJOINT_SET_H_	include/utils/disjoint_set.h	/^#define _UTIL_DISJOINT_SET_H_$/;"	d
_UTIL_FILE_H_	include/utils/file.h	/^#define _UTIL_FILE_H_$/;"	d
_UTIL_PROCUTILS_H_	include/utils/procutils.h	/^#define _UTIL_PROCUTILS_H_$/;"	d
_UTIL_STRLIB_H_	include/utils/strlib.h	/^#define _UTIL_STRLIB_H_$/;"	d
_UTIL_STRUTIL_H_	include/utils/strutils.h	/^#define _UTIL_STRUTIL_H_$/;"	d
__CIRC_GBUF_V_DEF	include/utils/circbuf.h	/^#define __CIRC_GBUF_V_DEF(/;"	d
__FILO_DEF	include/utils/filo.h	/^#define __FILO_DEF(/;"	d
__IS_ENABLED1	include/utils/utils.h	/^#define __IS_ENABLED1(/;"	d
__IS_ENABLED2	include/utils/utils.h	/^#define __IS_ENABLED2(/;"	d
__IS_ENABLED3	include/utils/utils.h	/^#define __IS_ENABLED3(/;"	d
__READ_ONCE	include/utils/utils.h	/^#define __READ_ONCE(/;"	d
__XXXX1	include/utils/utils.h	/^#define __XXXX1 /;"	d
__circ_gbuf_free_space	src/circbuf.c	/^int __circ_gbuf_free_space(circ_gbuf_t *circ_buf)$/;"	f
__circ_gbuf_pop	src/circbuf.c	/^int __circ_gbuf_pop(circ_gbuf_t *circ_buf, void *elem, int read_only)$/;"	f
__circ_gbuf_push	src/circbuf.c	/^int __circ_gbuf_push(circ_gbuf_t *circ_buf, void *elem)$/;"	f
__fallthrough	include/utils/utils.h	/^#define __fallthrough /;"	d
__fallthrough	include/utils/utils.h	/^#define __fallthrough$/;"	d
__packed	include/utils/utils.h	/^#define __packed /;"	d
__packed	src/slab.c	/^} __packed;$/;"	v	typeref:struct:slab_unit
__weak	include/utils/utils.h	/^#define __weak /;"	d
__weak	include/utils/utils.h	/^#undef __weak$/;"	d
_test_sep_neg	tests/test-strutils.c	/^#define _test_sep_neg(/;"	d	file:
_test_sep_pos	tests/test-strutils.c	/^#define _test_sep_pos(/;"	d	file:
_test_str_sep_do	tests/test-strutils.c	/^int _test_str_sep_do(char *input, char *sep, int toks_len, char *toks[], bool outcome)$/;"	f
a	tests/test-circbuf.c	/^	int a;$/;"	m	struct:test_struct	file:
any_pid_of	src/procutils.c	/^unsigned any_pid_of(const char* exe_name)$/;"	f
ap_app_desc	src/arg_parser.c	/^const char *ap_app_desc;$/;"	v
ap_app_name	src/arg_parser.c	/^const char *ap_app_name;$/;"	v
ap_init	src/arg_parser.c	/^void ap_init(const char *app_name, const char *app_desc)$/;"	f
ap_option	include/utils/arg_parser.h	/^struct ap_option {$/;"	s
ap_parse	src/arg_parser.c	/^int ap_parse(int argc, char *argv[], struct ap_option *ap_opts, void *data)$/;"	f
ap_print_help	src/arg_parser.c	/^void ap_print_help(struct ap_option *ap_opts, int exit_code)$/;"	f
ap_type_e	include/utils/arg_parser.h	/^enum ap_type_e {$/;"	g
arg	include/utils/workqueue.h	/^	void *arg;$/;"	m	struct:__anon12
atohstr	src/strutils.c	/^int atohstr(char *hstr, const uint8_t *arr, const int arr_len)$/;"	f
b	tests/test-circbuf.c	/^	char b;$/;"	m	struct:test_struct	file:
backlog	include/utils/workqueue.h	/^	queue_t backlog;$/;"	m	struct:__anon14
backlog_count	include/utils/workqueue.h	/^	int backlog_count;$/;"	m	struct:__anon14
backlog_lock	include/utils/workqueue.h	/^	pthread_mutex_t backlog_lock;$/;"	m	struct:__anon14
blob	include/utils/slab.h	/^	uint8_t *blob;$/;"	m	struct:__anon9
bool_handler	include/utils/arg_parser.h	/^	void (*bool_handler)();$/;"	m	struct:ap_option
buf	include/utils/strlib.h	/^	char *buf;$/;"	m	struct:__anon11
buffer	include/utils/circbuf.h	/^	void * const buffer;$/;"	m	struct:__anon2
buffer	include/utils/filo.h	/^    void *buffer;$/;"	m	struct:__anon4
bus_client_data	src/bus_server.c	/^struct bus_client_data {$/;"	s	file:
bus_global_lock	src/bus_server.c	/^pthread_mutex_t bus_global_lock;$/;"	v
bus_server	src/channel.c	/^	bus_server_t *bus_server;$/;"	m	struct:channel_unix_bus	file:
bus_server	tests/test.c	/^TEST_DEF(bus_server);$/;"	v
bus_server_queue_work	src/bus_server.c	/^int bus_server_queue_work(bus_server_t *s, int fd)$/;"	f
bus_server_serve	src/bus_server.c	/^void *bus_server_serve(void *arg)$/;"	f
bus_server_start	src/bus_server.c	/^int bus_server_start(bus_server_t *s, int max_clients, const char *path)$/;"	f
bus_server_stop	src/bus_server.c	/^void bus_server_stop(bus_server_t *s)$/;"	f
bus_server_t	include/utils/bus_server.h	/^} bus_server_t;$/;"	t	typeref:struct:__anon1
bus_server_work_fn	src/bus_server.c	/^int bus_server_work_fn(void *arg)$/;"	f
bus_write_check	tests/test-bus-server.c	/^int bus_write_check(int *fd)$/;"	f
c_utils_test_modules	tests/test.c	/^test_module_t c_utils_test_modules[] = {$/;"	v
canary	src/slab.c	/^	uint32_t canary;$/;"	m	struct:slab_unit	file:
capacity	include/utils/hashmap.h	/^	size_t capacity;$/;"	m	struct:__anon5
channel	include/utils/channel.h	/^struct channel {$/;"	s
channel_close	src/channel.c	/^int channel_close(struct channel_manager *ctx, const char *device)$/;"	f
channel_errors	include/utils/channel.h	/^enum channel_errors {$/;"	g
channel_fifo	src/channel.c	/^struct channel_fifo {$/;"	s	file:
channel_fifo_flush	src/channel.c	/^void channel_fifo_flush(void *data)$/;"	f
channel_fifo_recv	src/channel.c	/^int channel_fifo_recv(void *data, uint8_t *buf, int max_len)$/;"	f
channel_fifo_send	src/channel.c	/^int channel_fifo_send(void *data, uint8_t *buf, int len)$/;"	f
channel_fifo_setup	src/channel.c	/^int channel_fifo_setup(void **data, struct channel *c)$/;"	f
channel_fifo_teardown	src/channel.c	/^void channel_fifo_teardown(void *data)$/;"	f
channel_flush_fn_t	include/utils/channel.h	/^typedef void (*channel_flush_fn_t)(void *data);$/;"	t
channel_get	src/channel.c	/^int channel_get(struct channel_manager *ctx, const char *device,$/;"	f
channel_guess_type	src/channel.c	/^enum channel_type channel_guess_type(const char *desc)$/;"	f
channel_hash_map_callback	src/channel.c	/^void channel_hash_map_callback(const char *key, void *val)$/;"	f
channel_manager	include/utils/channel.h	/^struct channel_manager {$/;"	s
channel_manager_init	src/channel.c	/^void channel_manager_init(struct channel_manager *ctx)$/;"	f
channel_manager_teardown	src/channel.c	/^void channel_manager_teardown(struct channel_manager *ctx)$/;"	f
channel_msgq_flush	src/channel.c	/^void channel_msgq_flush(void *data)$/;"	f
channel_msgq_recv	src/channel.c	/^int channel_msgq_recv(void *data, uint8_t *buf, int max_len)$/;"	f
channel_msgq_s	src/channel.c	/^struct channel_msgq_s {$/;"	s	file:
channel_msgq_send	src/channel.c	/^int channel_msgq_send(void *data, uint8_t *buf, int len)$/;"	f
channel_msgq_setup	src/channel.c	/^int channel_msgq_setup(void **data, struct channel *c)$/;"	f
channel_msgq_teardown	src/channel.c	/^void channel_msgq_teardown(void *data)$/;"	f
channel_open	src/channel.c	/^int channel_open(struct channel_manager *ctx, enum channel_type type, char *device,$/;"	f
channel_ops	src/channel.c	/^struct channel_ops {$/;"	s	file:
channel_receive_fn_t	include/utils/channel.h	/^typedef int (*channel_receive_fn_t)(void *data, uint8_t *buf, int maxlen);$/;"	t
channel_send_fn_t	include/utils/channel.h	/^typedef int (*channel_send_fn_t)(void *data, uint8_t *buf, int len);$/;"	t
channel_type	include/utils/channel.h	/^enum channel_type {$/;"	g
channel_uart_flush	src/channel.c	/^void channel_uart_flush(void *data)$/;"	f
channel_uart_recv	src/channel.c	/^int channel_uart_recv(void *data, uint8_t *buf, int maxLen)$/;"	f
channel_uart_send	src/channel.c	/^int channel_uart_send(void *data, uint8_t *buf, int len)$/;"	f
channel_uart_setup	src/channel.c	/^int channel_uart_setup(void **data, struct channel *c)$/;"	f
channel_uart_teardown	src/channel.c	/^void channel_uart_teardown(void *data)$/;"	f
channel_unix_bus	src/channel.c	/^struct channel_unix_bus {$/;"	s	file:
channel_unix_bus_flush	src/channel.c	/^void channel_unix_bus_flush(void *data)$/;"	f
channel_unix_bus_recv	src/channel.c	/^int channel_unix_bus_recv(void *data, uint8_t *buf, int max_len)$/;"	f
channel_unix_bus_send	src/channel.c	/^int channel_unix_bus_send(void *data, uint8_t *buf, int len)$/;"	f
channel_unix_bus_setup	src/channel.c	/^int channel_unix_bus_setup(void **data, struct channel *c)$/;"	f
channel_unix_bus_teardown	src/channel.c	/^void channel_unix_bus_teardown(void *data)$/;"	f
channels	include/utils/channel.h	/^	hash_map_t channels;$/;"	m	struct:channel_manager
circ_gbuf_t	include/utils/circbuf.h	/^} circ_gbuf_t;$/;"	t	typeref:struct:__anon2
circular_buffer	tests/test.c	/^TEST_DEF(circular_buffer);$/;"	v
cmp_arg0_basename	src/procutils.c	/^static bool cmp_arg0_basename(const char *arg0, const char *basename)$/;"	f	file:
complete_fn	include/utils/workqueue.h	/^	work_complete_fn_t complete_fn;$/;"	m	struct:__anon12
count	include/utils/hashmap.h	/^	size_t count;$/;"	m	struct:__anon5
count	include/utils/slab.h	/^	size_t count;$/;"	m	struct:__anon9
data	include/utils/channel.h	/^	void *data;$/;"	m	struct:channel
data	src/slab.c	/^	uint8_t data[0];$/;"	m	struct:slab_unit	file:
date_time	tests/test.c	/^char date_time[DATE_TIME_STR_LEN];$/;"	v
device	include/utils/channel.h	/^	char *device;$/;"	m	struct:channel
die_oom	src/memory.c	/^static void die_oom(const char *msg, size_t count, size_t size)$/;"	f	file:
disjoint_set	include/utils/disjoint_set.h	/^struct disjoint_set {$/;"	s
disjoint_set_find	src/disjoint_set.c	/^int disjoint_set_find(struct disjoint_set *set, int a)$/;"	f
disjoint_set_make	src/disjoint_set.c	/^int disjoint_set_make(struct disjoint_set *set, int max_nodes)$/;"	f
disjoint_set_num_roots	src/disjoint_set.c	/^int disjoint_set_num_roots(struct disjoint_set *set)$/;"	f
disjoint_set_union	src/disjoint_set.c	/^void disjoint_set_union(struct disjoint_set *set, int a, int b)$/;"	f
do_test_filo	tests/test-filo.c	/^void do_test_filo(test_t *ctx, test_result_t *result)$/;"	f
elem_size	include/utils/filo.h	/^    size_t elem_size;$/;"	m	struct:__anon4
element_size	include/utils/circbuf.h	/^	uint16_t const element_size;$/;"	m	struct:__anon2
end_time	tests/test.h	/^	time_t end_time;$/;"	m	struct:__anon16
event	include/utils/workqueue.h	/^	event_t event;$/;"	m	struct:__anon13
event_cleanup	src/event.c	/^void event_cleanup(event_t *e)$/;"	f
event_init	src/event.c	/^int event_init(event_t *e, bool active, bool blocking)$/;"	f
event_is_set	src/event.c	/^bool event_is_set(event_t *e)$/;"	f
event_set	src/event.c	/^bool event_set(event_t *e)$/;"	f
event_t	include/utils/event.h	/^} event_t;$/;"	t	typeref:struct:__anon3
fcntl_setfl	src/fdutils.c	/^int fcntl_setfl(int fd, int flag)$/;"	f
fd	include/utils/bus_server.h	/^	int fd;$/;"	m	struct:__anon1
fd	include/utils/serial.h	/^	int fd;$/;"	m	struct:serial
fd	src/bus_server.c	/^	int fd;$/;"	m	struct:bus_client_data	file:
fd	src/channel.c	/^	int fd;$/;"	m	struct:channel_unix_bus	file:
fifo0	src/channel.c	/^	char *fifo0;$/;"	m	struct:channel_fifo	file:
fifo1	src/channel.c	/^	char *fifo1;$/;"	m	struct:channel_fifo	file:
file	include/utils/logger.h	/^	FILE *file;$/;"	m	struct:__anon7
file_read_all	src/file.c	/^int file_read_all(FILE *in, char **dataptr, size_t *sizeptr)$/;"	f
filo	tests/test.c	/^TEST_DEF(filo);$/;"	v
filo_alloc	src/filo.c	/^filo_t *filo_alloc(size_t elem_size, size_t max_size)$/;"	f
filo_free	src/filo.c	/^void filo_free(filo_t *pfilo)$/;"	f
filo_get_count	src/filo.c	/^size_t filo_get_count(filo_t *pfilo)$/;"	f
filo_get_free_space	src/filo.c	/^size_t filo_get_free_space(filo_t *pfilo)$/;"	f
filo_init	src/filo.c	/^void filo_init(filo_t *pfilo, void *buffer, size_t elem_size, size_t max_size)$/;"	f
filo_pop	src/filo.c	/^int filo_pop(filo_t *pfilo, void *elem, bool remove)$/;"	f
filo_push	src/filo.c	/^int filo_push(filo_t *pfilo, void *elem)$/;"	f
filo_reset	src/filo.c	/^void filo_reset(filo_t *pfilo)$/;"	f
filo_t	include/utils/filo.h	/^} filo_t;$/;"	t	typeref:struct:__anon4
flags	include/utils/arg_parser.h	/^	int flags;$/;"	m	struct:ap_option
flags	include/utils/logger.h	/^	uint32_t flags;$/;"	m	struct:__anon7
flags	include/utils/strlib.h	/^	uint32_t flags;$/;"	m	struct:__anon11
flush	src/channel.c	/^	channel_flush_fn_t flush;$/;"	m	struct:channel_ops	file:
flush_backlog	src/workqueue.c	/^static inline void flush_backlog(workqueue_t *wq)$/;"	f	file:
flush_fd	src/fdutils.c	/^int flush_fd(int fd)$/;"	f
free_test_hashmap_value	tests/test-hashmap.c	/^void free_test_hashmap_value(const char *key, void *val)$/;"	f
g_channel_ops	src/channel.c	/^struct channel_ops g_channel_ops[CHANNEL_TYPE_SENTINEL] = {$/;"	v	typeref:struct:channel_ops
g_message_data	src/bus_server.c	/^uint8_t g_message_data[1024];$/;"	v
g_message_data_length	src/bus_server.c	/^int g_message_data_length;$/;"	v
g_message_id	src/bus_server.c	/^int g_message_id;$/;"	v
get_backlog	src/workqueue.c	/^static inline work_t *get_backlog(workqueue_t *wq)$/;"	f	file:
get_log_ctx	include/utils/logger.h	/^#define get_log_ctx(/;"	d
get_worker	src/workqueue.c	/^static inline worker_t *get_worker(workqueue_t *wq, int worker_ndx)$/;"	f	file:
get_working_directory	src/file.c	/^char *get_working_directory(void)$/;"	f
handler	include/utils/arg_parser.h	/^	int (*handler)(int argc, char *argv[], void *data);$/;"	m	struct:ap_option
hash	include/utils/hashmap.h	/^	hash_t hash;$/;"	m	struct:hash_map_item_s
hash32	include/utils/strutils.h	/^#define hash32 /;"	d
hash32_djb2	src/strutils.c	/^uint32_t hash32_djb2(const char *str, int len)$/;"	f
hash32_fnv	src/strutils.c	/^uint32_t hash32_fnv(const char *str, int len)$/;"	f
hash64	include/utils/strutils.h	/^#define hash64 /;"	d
hash_check_key	src/hashmap.c	/^#define hash_check_key(/;"	d	file:
hash_fn	src/hashmap.c	/^#define hash_fn /;"	d	file:
hash_map_callback_t	include/utils/hashmap.h	/^typedef void (*hash_map_callback_t)(const char *key, void *val);$/;"	t
hash_map_count	src/hashmap.c	/^static size_t hash_map_count(hash_map_t *map)$/;"	f	file:
hash_map_delete	src/hashmap.c	/^void *hash_map_delete(hash_map_t *map, const char *key, hash_t key_hash)$/;"	f
hash_map_free	src/hashmap.c	/^void hash_map_free(hash_map_t *map, hash_map_callback_t callback)$/;"	f
hash_map_get	src/hashmap.c	/^void *hash_map_get(hash_map_t *map, const char *key, hash_t key_hash)$/;"	f
hash_map_init	src/hashmap.c	/^void hash_map_init(hash_map_t *map)$/;"	f
hash_map_insert	src/hashmap.c	/^hash_t hash_map_insert(hash_map_t *map, const char *key, void *val)$/;"	f
hash_map_it_init	src/hashmap.c	/^void hash_map_it_init(hash_map_iterator_t *it, hash_map_t *map)$/;"	f
hash_map_it_next	src/hashmap.c	/^int hash_map_it_next(hash_map_iterator_t *it, char **key, void **val)$/;"	f
hash_map_item_s	include/utils/hashmap.h	/^struct hash_map_item_s {$/;"	s
hash_map_item_t	include/utils/hashmap.h	/^typedef struct hash_map_item_s hash_map_item_t;$/;"	t	typeref:struct:hash_map_item_s
hash_map_iterator_t	include/utils/hashmap.h	/^} hash_map_iterator_t;$/;"	t	typeref:struct:__anon6
hash_map_lint	src/hashmap.c	/^static void hash_map_lint(hash_map_t *map)$/;"	f	file:
hash_map_rehash	src/hashmap.c	/^static void hash_map_rehash(hash_map_t *map)$/;"	f	file:
hash_map_t	include/utils/hashmap.h	/^} hash_map_t;$/;"	t	typeref:struct:__anon5
hash_t	include/utils/hashmap.h	/^typedef uint32_t hash_t;$/;"	t
hashmap	tests/test.c	/^TEST_DEF(hashmap);$/;"	v
head	include/utils/list.h	/^	node_t *head;$/;"	m	struct:list_s
head	include/utils/list.h	/^	snode_t *head;$/;"	m	struct:slist_s
help	include/utils/arg_parser.h	/^	const char *help;$/;"	m	struct:ap_option
hex2int	src/strutils.c	/^static inline int hex2int(char ch)$/;"	f	file:
hexdump	src/utils.c	/^void hexdump(const void *p, size_t len, const char *fmt, ...)$/;"	f
hstrtoa	src/strutils.c	/^int hstrtoa(uint8_t *arr, const char *hstr)$/;"	f
id	include/utils/channel.h	/^	int id;$/;"	m	struct:channel
id	include/utils/workqueue.h	/^	int id;$/;"	m	struct:__anon13
initialized	include/utils/event.h	/^	bool initialized;$/;"	m	struct:__anon3
inputdir	tests/test.h	/^	char *inputdir;$/;"	m	struct:__anon16
int2hex	src/strutils.c	/^static inline char int2hex(int v)$/;"	f	file:
is_lower_alpha	src/arg_parser.c	/^#define is_lower_alpha(/;"	d	file:
is_regular_file	src/file.c	/^int is_regular_file(const char *path)$/;"	f
is_server	include/utils/channel.h	/^	int is_server;$/;"	m	struct:channel
is_server	src/channel.c	/^	bool is_server;$/;"	m	struct:channel_fifo	file:
is_server	src/channel.c	/^	int is_server;$/;"	m	struct:channel_msgq_s	file:
item	include/utils/hashmap.h	/^	void *item;$/;"	m	struct:__anon6
job_id	tests/test-workqueue.c	/^	int job_id;$/;"	m	struct:test_work_data	file:
key	include/utils/hashmap.h	/^	char *key;$/;"	m	struct:hash_map_item_s
key	tests/test-hashmap.c	/^	char *key;$/;"	m	struct:test_hashmap	file:
leased	src/slab.c	/^	uint32_t leased;$/;"	m	struct:slab_unit	file:
len	include/utils/strlib.h	/^	size_t len;$/;"	m	struct:__anon11
list	include/utils/queue.h	/^	list_t list;$/;"	m	struct:__anon8
list	include/utils/stack.h	/^	slist_t list;$/;"	m	struct:__anon10
list_append	src/list.c	/^void list_append(list_t *list, node_t *node)$/;"	f
list_appendleft	src/list.c	/^void list_appendleft(list_t *list, node_t *node)$/;"	f
list_check_links	src/list.c	/^bool list_check_links(node_t *p1, node_t *p2)$/;"	f
list_find_node	src/list.c	/^node_t *list_find_node(list_t *list, node_t *node)$/;"	f
list_init	src/list.c	/^void list_init(list_t *list)$/;"	f
list_insert_node	src/list.c	/^void list_insert_node(list_t *list, node_t *after, node_t *new)$/;"	f
list_insert_nodes	src/list.c	/^int list_insert_nodes(list_t *list, node_t *after, node_t *start, node_t *end)$/;"	f
list_pop	src/list.c	/^int list_pop(list_t *list, node_t **node)$/;"	f
list_popleft	src/list.c	/^int list_popleft(list_t *list, node_t **node)$/;"	f
list_remove_node	src/list.c	/^void list_remove_node(list_t *list, node_t *node)$/;"	f
list_remove_nodes	src/list.c	/^int list_remove_nodes(list_t *list, node_t *start, node_t *end)$/;"	f
list_s	include/utils/list.h	/^struct list_s {$/;"	s
list_t	include/utils/list.h	/^typedef struct list_s list_t;$/;"	t	typeref:struct:list_s
log_level	include/utils/logger.h	/^	int log_level;$/;"	m	struct:__anon7
log_level_colors	src/logger.c	/^static const char *log_level_colors[LOG_MAX_LEVEL] = {$/;"	v	file:
log_level_names	src/logger.c	/^static const char *log_level_names[LOG_MAX_LEVEL] = {$/;"	v	file:
log_levels	include/utils/logger.h	/^enum log_levels {$/;"	g
log_puts_fn_t	include/utils/logger.h	/^typedef int (*log_puts_fn_t)(const char *buf);$/;"	t
logger_clear_prefix	src/logger.c	/^void logger_clear_prefix(logger_t *ctx)$/;"	f
logger_log	src/logger.c	/^int logger_log(logger_t *ctx, int log_level, const char *tag,$/;"	f
logger_log_set_color	src/logger.c	/^static inline void logger_log_set_color(logger_t *ctx, const char *color)$/;"	f	file:
logger_set_file	src/logger.c	/^void logger_set_file(logger_t *ctx, FILE *f)$/;"	f
logger_set_log_level	src/logger.c	/^void logger_set_log_level(logger_t *ctx, int log_level)$/;"	f
logger_set_prefix	src/logger.c	/^void logger_set_prefix(logger_t *ctx, const char *fmt, ...)$/;"	f
logger_set_prefix_const	src/logger.c	/^void logger_set_prefix_const(logger_t *ctx, const char *prefix)$/;"	f
logger_set_put_fn	src/logger.c	/^void logger_set_put_fn(logger_t *ctx, log_puts_fn_t fn)$/;"	f
logger_t	include/utils/logger.h	/^} logger_t;$/;"	t	typeref:struct:__anon7
long_name	include/utils/arg_parser.h	/^	const char *long_name;$/;"	m	struct:ap_option
long_test	tests/test-slab.c	/^	long long long_test;$/;"	m	struct:test_slab_blocks	file:
lstrip	src/strutils.c	/^int lstrip(char *str)$/;"	f
lstrip_soft	include/utils/strutils.h	/^#define lstrip_soft(/;"	d
main	tests/test.c	/^int main(int argc, char *argv[])$/;"	f
map	include/utils/hashmap.h	/^	hash_map_t *map;$/;"	m	struct:__anon6
max_clients	include/utils/bus_server.h	/^	int max_clients;$/;"	m	struct:__anon1
max_len	include/utils/strlib.h	/^	size_t max_len;$/;"	m	struct:__anon11
max_nodes	include/utils/disjoint_set.h	/^	int max_nodes;$/;"	m	struct:disjoint_set
max_size	include/utils/filo.h	/^    size_t max_size;$/;"	m	struct:__anon4
message_id	src/bus_server.c	/^	int message_id;$/;"	m	struct:bus_client_data	file:
millis_now	src/utils.c	/^int64_t millis_now()$/;"	f
millis_since	src/utils.c	/^int64_t millis_since(int64_t last)$/;"	f
mod_printf	tests/test.h	/^#define mod_printf(/;"	d
module	include/utils/logger.h	/^	const char *module;$/;"	m	struct:__anon7
msgbuf	src/channel.c	/^struct msgbuf {$/;"	s	file:
mtext	src/channel.c	/^	uint8_t mtext[512];	\/* message data *\/$/;"	m	struct:msgbuf	file:
mtype	src/channel.c	/^	long mtype;		\/* message type, must be > 0 *\/$/;"	m	struct:msgbuf	file:
name	tests/test.h	/^	const char *name;$/;"	m	struct:__anon17
new_termios	include/utils/serial.h	/^	struct termios new_termios;$/;"	m	struct:serial	typeref:struct:serial::termios
new_test_hashmap_value	tests/test-hashmap.c	/^struct test_hashmap *new_test_hashmap_value(size_t offset, const char *key)$/;"	f
next	include/utils/hashmap.h	/^	hash_map_item_t *next;$/;"	m	struct:hash_map_item_s
next	include/utils/list.h	/^	node_t *next;$/;"	m	struct:node_s
next	include/utils/list.h	/^	snode_t *next;$/;"	m	struct:snode_s
node	include/utils/workqueue.h	/^	queue_node_t node;$/;"	m	struct:__anon12
node_s	include/utils/list.h	/^struct node_s {$/;"	s
node_t	include/utils/list.h	/^typedef struct node_s node_t;$/;"	t	typeref:struct:node_s
num_complete	tests/test-workqueue.c	/^int num_complete;$/;"	v
num_workers	include/utils/workqueue.h	/^	int num_workers;$/;"	m	struct:__anon14
o_redirect	src/procutils.c	/^int o_redirect(int mode, const char *file)$/;"	f
off	tests/test-hashmap.c	/^	size_t off;$/;"	m	struct:test_hashmap	file:
offset	include/utils/arg_parser.h	/^	size_t offset;$/;"	m	struct:ap_option
old_termios	include/utils/serial.h	/^	struct termios old_termios;$/;"	m	struct:serial	typeref:struct:serial::termios
open_channels	include/utils/channel.h	/^	int open_channels;$/;"	m	struct:channel_manager
opt_name	include/utils/arg_parser.h	/^	const char *opt_name;$/;"	m	struct:ap_option
parent	include/utils/disjoint_set.h	/^	int parent[DISJOINT_SET_MAX];$/;"	m	struct:disjoint_set
parse_proc_cmdline	src/procutils.c	/^char *parse_proc_cmdline(unsigned pid, int pos)$/;"	f
pass	tests/test.h	/^	int pass;$/;"	m	struct:__anon15
pass	tests/test.h	/^	int pass;$/;"	m	struct:__anon16
path	include/utils/bus_server.h	/^	char *path;$/;"	m	struct:__anon1
path_extract	src/file.c	/^int path_extract(const char *path, char **dir_name, char **base_name)$/;"	f
path_join	src/file.c	/^char *path_join(const char *p1, const char *p2)$/;"	f
pid_bsearch_func	src/procutils.c	/^static int pid_bsearch_func(const void *pkey, const void *pelem)$/;"	f	file:
pid_cmp_func	src/procutils.c	/^static int pid_cmp_func(const void *a, const void *b)$/;"	f	file:
pid_of	src/procutils.c	/^unsigned pid_of(const char* exe_name, unsigned *pomit_arr, size_t arr_len)$/;"	f
poly_hash	src/strutils.c	/^uint64_t poly_hash(const char *str, int len)$/;"	f
pool	include/utils/hashmap.h	/^	hash_map_item_t **pool;$/;"	m	struct:__anon5
pop_count	include/utils/circbuf.h	/^	uint16_t pop_count;$/;"	m	struct:__anon2
pos	include/utils/hashmap.h	/^	size_t pos;$/;"	m	struct:__anon6
prefix	include/utils/logger.h	/^	char *prefix;$/;"	m	struct:__anon7
prev	include/utils/list.h	/^	node_t *prev;$/;"	m	struct:node_s
process_cli_opts	tests/test.c	/^void process_cli_opts(test_t *ctx, int argc, char *argv[])$/;"	f
procutils	tests/test.c	/^TEST_DEF(procutils);$/;"	v
push_count	include/utils/circbuf.h	/^	uint16_t push_count;$/;"	m	struct:__anon2
put_backlog	src/workqueue.c	/^static inline void put_backlog(workqueue_t *wq, work_t *work)$/;"	f	file:
puts	include/utils/logger.h	/^	log_puts_fn_t puts;$/;"	m	struct:__anon7
queue_dequeue	src/queue.c	/^int queue_dequeue(queue_t *queue, queue_node_t **node)$/;"	f
queue_enqueue	src/queue.c	/^void queue_enqueue(queue_t *queue, queue_node_t *node)$/;"	f
queue_init	src/queue.c	/^void queue_init(queue_t *queue)$/;"	f
queue_node_t	include/utils/queue.h	/^#define queue_node_t /;"	d
queue_peek_first	src/queue.c	/^int queue_peek_first(queue_t *queue, queue_node_t **node)$/;"	f
queue_peek_last	src/queue.c	/^int queue_peek_last(queue_t *queue, queue_node_t **node)$/;"	f
queue_t	include/utils/queue.h	/^} queue_t;$/;"	t	typeref:struct:__anon8
r2	tests/test-circbuf.c	/^double r2()$/;"	f
randint	src/utils.c	/^int randint(int min, int max)$/;"	f
rank	include/utils/disjoint_set.h	/^	int rank[DISJOINT_SET_MAX];$/;"	m	struct:disjoint_set
read_loop	src/fdutils.c	/^ssize_t read_loop(int fd, void *buf, size_t max_len)$/;"	f
read_pid	src/procutils.c	/^int read_pid(const char *file, int *pid)$/;"	f
receive	src/channel.c	/^	channel_receive_fn_t receive;$/;"	m	struct:channel_ops	file:
recv_buf	src/channel.c	/^struct msgbuf send_buf, recv_buf;$/;"	v	typeref:struct:
recv_id	src/channel.c	/^	int recv_id;$/;"	m	struct:channel_msgq_s	file:
recv_msgid	src/channel.c	/^	int recv_msgid;$/;"	m	struct:channel_msgq_s	file:
remove_all	src/strutils.c	/^void remove_all(char *str, char c)$/;"	f
rfd	include/utils/event.h	/^	int rfd;$/;"	m	struct:__anon3
rfd	src/channel.c	/^	int rfd;$/;"	m	struct:channel_fifo	file:
round_up_pow2	src/utils.c	/^uint32_t round_up_pow2(uint32_t v)$/;"	f
rstrip	src/strutils.c	/^int rstrip(char *str)$/;"	f
runner	tests/test.h	/^	void (*runner)(test_t *ctx, test_result_t *result);$/;"	m	struct:__anon17
runs	tests/test-workqueue.c	/^	int runs;$/;"	m	struct:test_work_data	file:
safe_atoi	src/strutils.c	/^int safe_atoi(const char *a, int *i)$/;"	f
safe_calloc	src/memory.c	/^void *safe_calloc(size_t count, size_t size)$/;"	f
safe_free	src/memory.c	/^void safe_free(void *p)$/;"	f
safe_malloc	src/memory.c	/^void *safe_malloc(size_t size)$/;"	f
safe_realloc	src/memory.c	/^void *safe_realloc(void *data, size_t size)$/;"	f
safe_realloc_zero	src/memory.c	/^void *safe_realloc_zero(void *data, size_t old_size, size_t new_size)$/;"	f
safe_strdup	src/memory.c	/^void *safe_strdup(const char *s)$/;"	f
safe_strncpy	src/strutils.c	/^char *safe_strncpy(char* dest, const char* src, size_t size)$/;"	f
send	src/channel.c	/^	channel_send_fn_t send;$/;"	m	struct:channel_ops	file:
send_buf	src/channel.c	/^struct msgbuf send_buf, recv_buf;$/;"	v	typeref:struct:msgbuf
send_id	src/channel.c	/^	int send_id;$/;"	m	struct:channel_msgq_s	file:
send_msgid	src/channel.c	/^	int send_msgid;$/;"	m	struct:channel_msgq_s	file:
serial	include/utils/serial.h	/^struct serial {$/;"	s
serial_assert_dtr	src/serial.c	/^void serial_assert_dtr(struct serial *ctx, int state)$/;"	f
serial_assert_rts	src/serial.c	/^void serial_assert_rts(struct serial *ctx, int state)$/;"	f
serial_close	src/serial.c	/^void serial_close(struct serial *ctx)$/;"	f
serial_flush	src/serial.c	/^void serial_flush(struct serial *ctx)$/;"	f
serial_flush_rx	src/serial.c	/^void serial_flush_rx(struct serial *ctx)$/;"	f
serial_flush_tx	src/serial.c	/^void serial_flush_tx(struct serial *ctx)$/;"	f
serial_get_cts	src/serial.c	/^int serial_get_cts(struct serial *ctx)$/;"	f
serial_get_dcd	src/serial.c	/^int serial_get_dcd(struct serial *ctx)$/;"	f
serial_get_dsr	src/serial.c	/^int serial_get_dsr(struct serial *ctx)$/;"	f
serial_get_rng	src/serial.c	/^int serial_get_rng(struct serial *ctx)$/;"	f
serial_open	src/serial.c	/^struct serial *serial_open(const char *device, int baud, const char *mode)$/;"	f
serial_read	src/serial.c	/^int serial_read(struct serial *ctx, unsigned char *buf, int size)$/;"	f
serial_write	src/serial.c	/^int serial_write(struct serial *ctx, unsigned char *buf, int size)$/;"	f
server	tests/test-bus-server.c	/^bus_server_t server;$/;"	v
setup	src/channel.c	/^	int (*setup)(void **data, struct channel *c);$/;"	m	struct:channel_ops	file:
short_name	include/utils/arg_parser.h	/^	signed char short_name;$/;"	m	struct:ap_option
size	include/utils/circbuf.h	/^	uint16_t const size;$/;"	m	struct:__anon2
size	include/utils/slab.h	/^	size_t size;$/;"	m	struct:__anon9
slab	tests/test.c	/^TEST_DEF(slab);$/;"	v
slab_alloc	src/slab.c	/^int slab_alloc(slab_t *slab, void **block)$/;"	f
slab_free	src/slab.c	/^int slab_free(void *block)$/;"	f
slab_init	src/slab.c	/^int slab_init(slab_t *slab, size_t slab_size,$/;"	f
slab_t	include/utils/slab.h	/^} slab_t;$/;"	t	typeref:struct:__anon9
slab_unit	src/slab.c	/^struct slab_unit {$/;"	s	file:
slice	include/utils/workqueue.h	/^	int64_t slice;$/;"	m	struct:__anon12
slist_append	src/list.c	/^void slist_append(slist_t *list, snode_t *after, snode_t *node)$/;"	f
slist_appendleft	src/list.c	/^void slist_appendleft(slist_t *list, snode_t *node)$/;"	f
slist_init	src/list.c	/^void slist_init(slist_t *list)$/;"	f
slist_insert_node	src/list.c	/^void slist_insert_node(slist_t *list, snode_t *after, snode_t *new)$/;"	f
slist_pop	src/list.c	/^int slist_pop(slist_t *list, snode_t *after, snode_t **node)$/;"	f
slist_popleft	src/list.c	/^int slist_popleft(slist_t *list, snode_t **node)$/;"	f
slist_remove_node	src/list.c	/^int slist_remove_node(slist_t *list, snode_t *node)$/;"	f
slist_s	include/utils/list.h	/^struct slist_s {$/;"	s
slist_t	include/utils/list.h	/^typedef struct slist_s slist_t;$/;"	t	typeref:struct:slist_s
snode_s	include/utils/list.h	/^struct snode_s {$/;"	s
snode_t	include/utils/list.h	/^typedef struct snode_s snode_t;$/;"	t	typeref:struct:snode_s
speed	include/utils/channel.h	/^	int speed;$/;"	m	struct:channel
split_string	src/strutils.c	/^int split_string(char *buf, char *sep, char ***tokens)$/;"	f
stack_get_top	src/stack.c	/^int stack_get_top(stack_t *stack, stack_node_t **node)$/;"	f
stack_init	src/stack.c	/^void stack_init(stack_t *stack)$/;"	f
stack_node_t	include/utils/stack.h	/^#define stack_node_t /;"	d
stack_pop	src/stack.c	/^int stack_pop(stack_t *stack, stack_node_t **node)$/;"	f
stack_push	src/stack.c	/^void stack_push(stack_t *stack, stack_node_t *node)$/;"	f
stack_t	include/utils/stack.h	/^} stack_t;$/;"	t	typeref:struct:__anon10
start_time	tests/test.h	/^	time_t start_time;$/;"	m	struct:__anon16
state	include/utils/workqueue.h	/^	int state;$/;"	m	struct:__anon13
status	include/utils/workqueue.h	/^	enum work_status status;$/;"	m	struct:__anon12	typeref:enum:__anon12::work_status
str	src/arg_parser.c	/^#define str(/;"	d	file:
str_const_append	include/utils/strlib.h	/^#define str_const_append(/;"	d
str_const_copy	include/utils/strlib.h	/^#define str_const_copy(/;"	d
str_flush	include/utils/strlib.h	/^#define str_flush(/;"	d
str_sep	src/strutils.c	/^char *str_sep(char **str, const char *sep)$/;"	f
str_sep_count	src/strutils.c	/^size_t str_sep_count(const char *str, const char *sep)$/;"	f
strcntchr	src/strutils.c	/^int strcntchr(char *s, char c)$/;"	f
string_clone	src/strlib.c	/^void string_clone(string_t *dest, const string_t *src)$/;"	f
string_copy	src/strlib.c	/^int string_copy(string_t *s, const char *mode, const char *str, size_t len)$/;"	f
string_create	src/strlib.c	/^void string_create(string_t *s, const char *buf, size_t len)$/;"	f
string_destroy	src/strlib.c	/^void string_destroy(string_t *s)$/;"	f
string_merge	src/strlib.c	/^int string_merge(string_t *primary, string_t *secondary)$/;"	f
string_printf	src/strlib.c	/^int string_printf(string_t *s, const char *mode, const char *fmt, ...)$/;"	f
string_resize	src/strlib.c	/^int string_resize(string_t *s, size_t new_len)$/;"	f
string_t	include/utils/strlib.h	/^} string_t;$/;"	t	typeref:struct:__anon11
strip	src/strutils.c	/^int strip(char *str)$/;"	f
strisempty	src/strutils.c	/^int strisempty(char *s)$/;"	f
strlib	tests/test.c	/^TEST_DEF(strlib);$/;"	v
strutils	tests/test.c	/^TEST_DEF(strutils);$/;"	v
tail	include/utils/list.h	/^	node_t *tail;$/;"	m	struct:list_s
teardown	src/channel.c	/^	void (*teardown)(void *data);$/;"	m	struct:channel_ops	file:
test	tests/test-slab.c	/^	int test;$/;"	m	struct:test_slab_blocks	file:
test_boundary	tests/test-circbuf.c	/^int test_boundary()$/;"	f
test_build_word_list	tests/test-hashmap.c	/^size_t test_build_word_list(char *buf, const char *const **word_list)$/;"	f
test_bus_server	tests/test-bus-server.c	/^int test_bus_server()$/;"	f
test_check_str	tests/test-strlib.c	/^int test_check_str(string_t *s, const char *str)$/;"	f
test_dict_delete	tests/test-hashmap.c	/^int test_dict_delete(hash_map_t *map, const char * const *words, size_t count)$/;"	f
test_dict_insert	tests/test-hashmap.c	/^int test_dict_insert(hash_map_t *map, const char * const *words, size_t count)$/;"	f
test_dict_iterator	tests/test-hashmap.c	/^int test_dict_iterator(hash_map_t *map, const char * const *words, size_t count)$/;"	f
test_execute	tests/test.c	/^void test_execute(test_t *t, test_module_t *tm)$/;"	f
test_hashmap	tests/test-hashmap.c	/^struct test_hashmap {$/;"	s	file:
test_lock	tests/test-workqueue.c	/^pthread_mutex_t test_lock;$/;"	v
test_module_t	tests/test.h	/^} test_module_t;$/;"	t	typeref:struct:__anon17
test_pid_of	tests/test-procutils.c	/^int test_pid_of(void)$/;"	f
test_print_info_string	tests/test-strlib.c	/^void test_print_info_string(const char *msg, string_t *s)$/;"	f
test_probabilistic	tests/test-circbuf.c	/^int test_probabilistic()$/;"	f
test_read_input_file	tests/test.c	/^void test_read_input_file(test_t *ctx, char *filename, char **buf, size_t *size)$/;"	f
test_result_t	tests/test.h	/^} test_result_t;$/;"	t	typeref:struct:__anon15
test_slab_alloc_free	tests/test-slab.c	/^int test_slab_alloc_free()$/;"	f
test_slab_blocks	tests/test-slab.c	/^struct test_slab_blocks$/;"	s	file:
test_str_copy	tests/test-strlib.c	/^int test_str_copy()$/;"	f
test_str_printf	tests/test-strlib.c	/^int test_str_printf()$/;"	f
test_str_sep	tests/test-strutils.c	/^int test_str_sep()$/;"	f
test_str_sep_count	tests/test-strutils.c	/^int test_str_sep_count()$/;"	f
test_struct	tests/test-circbuf.c	/^struct test_struct$/;"	s	file:
test_t	tests/test.h	/^} test_t;$/;"	t	typeref:struct:__anon16
test_work_data	tests/test-workqueue.c	/^struct test_work_data {$/;"	s	file:
test_work_runner	tests/test-workqueue.c	/^int test_work_runner(void *arg)$/;"	f
test_workqueue	tests/test-workqueue.c	/^int test_workqueue()$/;"	f
thread	include/utils/bus_server.h	/^	pthread_t thread;$/;"	m	struct:__anon1
thread	include/utils/workqueue.h	/^	pthread_t thread;$/;"	m	struct:__anon13
time_string	tests/test.c	/^char *time_string(time_t *t)$/;"	f
to_lower	src/strutils.c	/^void to_lower(char *s)$/;"	f
to_upper	src/strutils.c	/^void to_upper(char *s)$/;"	f
top	include/utils/filo.h	/^    size_t top;$/;"	m	struct:__anon4
total	tests/test.h	/^	int total;$/;"	m	struct:__anon15
total	tests/test.h	/^	int total;$/;"	m	struct:__anon16
trim_suffix	src/strutils.c	/^int trim_suffix(char *str, const char *suffix)$/;"	f
type	include/utils/arg_parser.h	/^	enum ap_type_e type;$/;"	m	struct:ap_option	typeref:enum:ap_option::ap_type_e
type	include/utils/channel.h	/^	enum channel_type type;$/;"	m	struct:channel	typeref:enum:channel::channel_type
unix_socket_connect	src/sockutils.c	/^int unix_socket_connect(const char *path)$/;"	f
unix_socket_listen	src/sockutils.c	/^int unix_socket_listen(const char *path, int max_clients)$/;"	f
usec_now	src/utils.c	/^int64_t usec_now()$/;"	f
usec_since	src/utils.c	/^int64_t usec_since(int64_t last)$/;"	f
val	include/utils/hashmap.h	/^	void *val;$/;"	m	struct:hash_map_item_s
validator	include/utils/arg_parser.h	/^	int (*validator)(void *data);$/;"	m	struct:ap_option
wakeup_first_free_worker	src/workqueue.c	/^static inline void wakeup_first_free_worker(workqueue_t *wq)$/;"	f	file:
wfd	include/utils/event.h	/^	int wfd;$/;"	m	struct:__anon3
wfd	src/channel.c	/^	int wfd;$/;"	m	struct:channel_fifo	file:
work	include/utils/bus_server.h	/^	work_t *work;$/;"	m	struct:__anon1
work_complete_fn_t	include/utils/workqueue.h	/^typedef void (*work_complete_fn_t) (void *work);$/;"	t
work_fn	include/utils/workqueue.h	/^	work_fn_t work_fn;$/;"	m	struct:__anon12
work_fn_t	include/utils/workqueue.h	/^typedef int (*work_fn_t) (void *);$/;"	t
work_status	include/utils/workqueue.h	/^enum work_status {$/;"	g
work_t	include/utils/workqueue.h	/^} work_t;$/;"	t	typeref:struct:__anon12
worker_state_e	src/workqueue.c	/^enum worker_state_e {$/;"	g	file:
worker_t	include/utils/workqueue.h	/^} worker_t;$/;"	t	typeref:struct:__anon13
workers	include/utils/workqueue.h	/^	worker_t *workers;$/;"	m	struct:__anon14
workqueue	tests/test.c	/^TEST_DEF(workqueue);$/;"	v
workqueue_add_work	src/workqueue.c	/^void workqueue_add_work(workqueue_t *wq, work_t *work)$/;"	f
workqueue_backlog_count	src/workqueue.c	/^int workqueue_backlog_count(workqueue_t *wq)$/;"	f
workqueue_create	src/workqueue.c	/^int workqueue_create(workqueue_t *wq, int num_workers)$/;"	f
workqueue_destroy	src/workqueue.c	/^void workqueue_destroy(workqueue_t *wq)$/;"	f
workqueue_factory	src/workqueue.c	/^static void *workqueue_factory(void *arg)$/;"	f	file:
workqueue_t	include/utils/workqueue.h	/^} workqueue_t;$/;"	t	typeref:struct:__anon14
wq	include/utils/bus_server.h	/^	workqueue_t wq;$/;"	m	struct:__anon1
wq	include/utils/workqueue.h	/^	void *wq;$/;"	m	struct:__anon13
write_loop	src/fdutils.c	/^ssize_t write_loop(int fd, const void *buf, size_t len)$/;"	f
write_pid	src/procutils.c	/^int write_pid(const char *file)$/;"	f
xstr	src/arg_parser.c	/^#define xstr(/;"	d	file:
